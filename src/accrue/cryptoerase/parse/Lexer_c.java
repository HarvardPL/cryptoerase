/* The following code was generated by JFlex 1.5.1 */

/* Java 1.4 scanner for JFlex.
 * Based on JLS, 2ed, Chapter 3.
 */

package accrue.cryptoerase.parse;

import java_cup.runtime.Symbol;
import polyglot.lex.Lexer;
import polyglot.lex.*;
import polyglot.util.Position;
import polyglot.util.ErrorQueue;
import polyglot.util.ErrorInfo;
import polyglot.frontend.FileSource;
import java.util.HashMap;
import java.math.BigInteger;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>cryptoerase.flex</tt>
 */
public class Lexer_c implements Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARACTER = 4;
  public static final int TRADITIONAL_COMMENT = 6;
  public static final int END_OF_LINE_COMMENT = 8;
  public static final int ACCRUE_ANNOTATION = 10;
  public static final int ACCRUE_COMMENT_ANNOTATION = 12;
  public static final int ACCRUE_COMMENT_ANNOTATION_CONTINUATION = 14;
  public static final int ACCRUE_COMMENT_ANNOTATION_STRING = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\5\1\3\1\1\1\66\1\67\1\2\16\5\4\0\1\3\1\51"+
    "\1\24\1\0\1\4\1\61\1\55\1\23\1\36\1\37\1\22\1\57"+
    "\1\45\1\15\1\13\1\21\1\6\3\17\4\12\2\7\1\54\1\44"+
    "\1\50\1\46\1\47\1\53\1\20\3\11\1\64\1\14\1\63\5\4"+
    "\1\62\13\4\1\10\2\4\1\42\1\16\1\43\1\60\1\4\1\0"+
    "\1\32\1\65\1\11\1\64\1\30\1\31\5\4\1\33\1\4\1\35"+
    "\3\4\1\26\1\34\1\25\1\27\2\4\1\10\2\4\1\40\1\56"+
    "\1\41\1\52\6\5\1\70\32\5\2\0\4\4\4\0\1\4\2\0"+
    "\1\5\7\0\1\4\4\0\1\4\5\0\27\4\1\0\37\4\1\0"+
    "\u01ca\4\4\0\14\4\16\0\5\4\7\0\1\4\1\0\1\4\21\0"+
    "\160\5\5\4\1\0\2\4\2\0\4\4\10\0\1\4\1\0\3\4"+
    "\1\0\1\4\1\0\24\4\1\0\123\4\1\0\213\4\1\0\5\5"+
    "\2\0\236\4\11\0\46\4\2\0\1\4\7\0\47\4\11\0\55\5"+
    "\1\0\1\5\1\0\2\5\1\0\2\5\1\0\1\5\10\0\33\4"+
    "\5\0\3\4\15\0\4\5\7\0\1\4\4\0\13\5\5\0\53\4"+
    "\37\5\4\0\2\4\1\5\143\4\1\0\1\4\10\5\1\0\6\5"+
    "\2\4\2\5\1\0\4\5\2\4\12\5\3\4\2\0\1\4\17\0"+
    "\1\5\1\4\1\5\36\4\33\5\2\0\131\4\13\5\1\4\16\0"+
    "\12\5\41\4\11\5\2\4\4\0\1\4\5\0\26\4\4\5\1\4"+
    "\11\5\1\4\3\5\1\4\5\5\22\0\31\4\3\5\244\0\4\5"+
    "\66\4\3\5\1\4\22\5\1\4\7\5\12\4\2\5\2\0\12\5"+
    "\1\0\7\4\1\0\7\4\1\0\3\5\1\0\10\4\2\0\2\4"+
    "\2\0\26\4\1\0\7\4\1\0\1\4\3\0\4\4\2\0\1\5"+
    "\1\4\7\5\2\0\2\5\2\0\3\5\1\4\10\0\1\5\4\0"+
    "\2\4\1\0\3\4\2\5\2\0\12\5\4\4\7\0\1\4\5\0"+
    "\3\5\1\0\6\4\4\0\2\4\2\0\26\4\1\0\7\4\1\0"+
    "\2\4\1\0\2\4\1\0\2\4\2\0\1\5\1\0\5\5\4\0"+
    "\2\5\2\0\3\5\3\0\1\5\7\0\4\4\1\0\1\4\7\0"+
    "\14\5\3\4\1\5\13\0\3\5\1\0\11\4\1\0\3\4\1\0"+
    "\26\4\1\0\7\4\1\0\2\4\1\0\5\4\2\0\1\5\1\4"+
    "\10\5\1\0\3\5\1\0\3\5\2\0\1\4\17\0\2\4\2\5"+
    "\2\0\12\5\1\0\1\4\17\0\3\5\1\0\10\4\2\0\2\4"+
    "\2\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4\2\0\1\5"+
    "\1\4\7\5\2\0\2\5\2\0\3\5\10\0\2\5\4\0\2\4"+
    "\1\0\3\4\2\5\2\0\12\5\1\0\1\4\20\0\1\5\1\4"+
    "\1\0\6\4\3\0\3\4\1\0\4\4\3\0\2\4\1\0\1\4"+
    "\1\0\2\4\3\0\2\4\3\0\3\4\3\0\14\4\4\0\5\5"+
    "\3\0\3\5\1\0\4\5\2\0\1\4\6\0\1\5\16\0\12\5"+
    "\11\0\1\4\7\0\3\5\1\0\10\4\1\0\3\4\1\0\27\4"+
    "\1\0\12\4\1\0\5\4\3\0\1\4\7\5\1\0\3\5\1\0"+
    "\4\5\7\0\2\5\1\0\2\4\6\0\2\4\2\5\2\0\12\5"+
    "\22\0\2\5\1\0\10\4\1\0\3\4\1\0\27\4\1\0\12\4"+
    "\1\0\5\4\2\0\1\5\1\4\7\5\1\0\3\5\1\0\4\5"+
    "\7\0\2\5\7\0\1\4\1\0\2\4\2\5\2\0\12\5\1\0"+
    "\2\4\17\0\2\5\1\0\10\4\1\0\3\4\1\0\51\4\2\0"+
    "\1\4\7\5\1\0\3\5\1\0\4\5\1\4\10\0\1\5\10\0"+
    "\2\4\2\5\2\0\12\5\12\0\6\4\2\0\2\5\1\0\22\4"+
    "\3\0\30\4\1\0\11\4\1\0\1\4\2\0\7\4\3\0\1\5"+
    "\4\0\6\5\1\0\1\5\1\0\10\5\22\0\2\5\15\0\60\4"+
    "\1\5\2\4\7\5\4\0\10\4\10\5\1\0\12\5\47\0\2\4"+
    "\1\0\1\4\2\0\2\4\1\0\1\4\2\0\1\4\6\0\4\4"+
    "\1\0\7\4\1\0\3\4\1\0\1\4\1\0\1\4\2\0\2\4"+
    "\1\0\4\4\1\5\2\4\6\5\1\0\2\5\1\4\2\0\5\4"+
    "\1\0\1\4\1\0\6\5\2\0\12\5\2\0\2\4\42\0\1\4"+
    "\27\0\2\5\6\0\12\5\13\0\1\5\1\0\1\5\1\0\1\5"+
    "\4\0\2\5\10\4\1\0\44\4\4\0\24\5\1\0\2\5\5\4"+
    "\13\5\1\0\44\5\11\0\1\5\71\0\53\4\24\5\1\4\12\5"+
    "\6\0\6\4\4\5\4\4\3\5\1\4\3\5\2\4\7\5\3\4"+
    "\4\5\15\4\14\5\1\4\17\5\2\0\46\4\12\0\53\4\1\0"+
    "\1\4\3\0\u0149\4\1\0\4\4\2\0\7\4\1\0\1\4\1\0"+
    "\4\4\2\0\51\4\1\0\4\4\2\0\41\4\1\0\4\4\2\0"+
    "\7\4\1\0\1\4\1\0\4\4\2\0\17\4\1\0\71\4\1\0"+
    "\4\4\2\0\103\4\2\0\3\5\40\0\20\4\20\0\125\4\14\0"+
    "\u026c\4\2\0\21\4\1\0\32\4\5\0\113\4\3\0\3\4\17\0"+
    "\15\4\1\0\4\4\3\5\13\0\22\4\3\5\13\0\22\4\2\5"+
    "\14\0\15\4\1\0\3\4\1\0\2\5\14\0\64\4\40\5\3\0"+
    "\1\4\3\0\2\4\1\5\2\0\12\5\41\0\3\5\2\0\12\5"+
    "\6\0\130\4\10\0\51\4\1\5\1\4\5\0\106\4\12\0\35\4"+
    "\3\0\14\5\4\0\14\5\12\0\12\5\36\4\2\0\5\4\13\0"+
    "\54\4\4\0\21\5\7\4\2\5\6\0\12\5\46\0\27\4\5\5"+
    "\4\0\65\4\12\5\1\0\35\5\2\0\13\5\6\0\12\5\15\0"+
    "\1\4\130\0\5\5\57\4\21\5\7\4\4\0\12\5\21\0\11\5"+
    "\14\0\3\5\36\4\12\5\3\0\2\4\12\5\6\0\46\4\16\5"+
    "\14\0\44\4\24\5\10\0\12\5\3\0\3\4\12\5\44\4\122\0"+
    "\3\5\1\0\25\5\4\4\1\5\4\4\1\5\15\0\300\4\47\5"+
    "\25\0\4\5\u0116\4\2\0\6\4\2\0\46\4\2\0\6\4\2\0"+
    "\10\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0\37\4\2\0"+
    "\65\4\1\0\7\4\1\0\1\4\3\0\3\4\1\0\7\4\3\0"+
    "\4\4\2\0\6\4\4\0\15\4\5\0\3\4\1\0\7\4\16\0"+
    "\5\5\30\0\1\66\1\66\5\5\20\0\2\4\23\0\1\4\13\0"+
    "\5\5\5\0\6\5\1\0\1\4\15\0\1\4\20\0\15\4\3\0"+
    "\32\4\26\0\15\5\4\0\1\5\3\0\14\5\21\0\1\4\4\0"+
    "\1\4\2\0\12\4\1\0\1\4\3\0\5\4\6\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\0\4\4\1\0\13\4\2\0\4\4\5\0"+
    "\5\4\4\0\1\4\21\0\51\4\u0a77\0\57\4\1\0\57\4\1\0"+
    "\205\4\6\0\4\4\3\5\16\0\46\4\12\0\66\4\11\0\1\4"+
    "\17\0\1\5\27\4\11\0\7\4\1\0\7\4\1\0\7\4\1\0"+
    "\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0"+
    "\40\5\57\0\1\4\u01d5\0\3\4\31\0\11\4\6\5\1\0\5\4"+
    "\2\0\5\4\4\0\126\4\2\0\2\5\2\0\3\4\1\0\132\4"+
    "\1\0\4\4\5\0\51\4\3\0\136\4\21\0\33\4\65\0\20\4"+
    "\u0200\0\u19b6\4\112\0\u51cc\4\64\0\u048d\4\103\0\56\4\2\0\u010d\4"+
    "\3\0\20\4\12\5\2\4\24\0\57\4\1\5\14\0\2\5\1\0"+
    "\31\4\10\0\120\4\2\5\45\0\11\4\2\0\147\4\2\0\4\4"+
    "\1\0\2\4\16\0\12\4\120\0\10\4\1\5\3\4\1\5\4\4"+
    "\1\5\27\4\5\5\20\0\1\4\7\0\64\4\14\0\2\5\62\4"+
    "\21\5\13\0\12\5\6\0\22\5\6\4\3\0\1\4\4\0\12\5"+
    "\34\4\10\5\2\0\27\4\15\5\14\0\35\4\3\0\4\5\57\4"+
    "\16\5\16\0\1\4\12\5\46\0\51\4\16\5\11\0\3\4\1\5"+
    "\10\4\2\5\2\0\12\5\6\0\27\4\3\0\1\4\1\5\4\0"+
    "\60\4\1\5\1\4\3\5\2\4\2\5\5\4\2\5\1\4\1\5"+
    "\1\4\30\0\3\4\43\0\6\4\2\0\6\4\2\0\6\4\11\0"+
    "\7\4\1\0\7\4\221\0\43\4\10\5\1\0\2\5\2\0\12\5"+
    "\6\0\u2ba4\4\14\0\27\4\4\0\61\4\u2104\0\u012e\4\2\0\76\4"+
    "\2\0\152\4\46\0\7\4\14\0\5\4\5\0\1\4\1\5\12\4"+
    "\1\0\15\4\1\0\5\4\1\0\1\4\1\0\2\4\1\0\2\4"+
    "\1\0\154\4\41\0\u016b\4\22\0\100\4\2\0\66\4\50\0\15\4"+
    "\3\0\20\5\20\0\7\5\14\0\2\4\30\0\3\4\31\0\1\4"+
    "\6\0\5\4\1\0\207\4\2\0\1\5\4\0\1\4\13\0\12\5"+
    "\7\0\32\4\4\0\1\4\1\0\32\4\13\0\131\4\3\0\6\4"+
    "\2\0\6\4\2\0\6\4\2\0\3\4\3\0\2\4\3\0\2\4"+
    "\22\0\3\5\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\2\2\1\3\2\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\3\3\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\2\41\1\1\1\42\1\40\2\43\1\1"+
    "\1\44\1\2\2\45\1\46\1\47\1\1\1\50\1\51"+
    "\1\52\2\0\1\53\1\0\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\3\3\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\2\104\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116"+
    "\1\117\1\120\1\121\1\122\1\123\1\124\1\125\1\126"+
    "\1\53\1\0\1\127\3\3\1\130\1\131\1\132\1\104"+
    "\1\133\1\134\1\3\1\135\1\136\1\137";

  private static int [] zzUnpackAction() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e"+
    "\0\u0357\0\u0201\0\u0390\0\u03c9\0\u0201\0\u0201\0\u0402\0\u043b"+
    "\0\u0474\0\u0201\0\u0201\0\u0201\0\u0201\0\u0201\0\u0201\0\u0201"+
    "\0\u0201\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0201\0\u0201\0\u0201"+
    "\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675\0\u06ae\0\u0201\0\u06e7"+
    "\0\u0720\0\u0201\0\u0759\0\u0201\0\u0792\0\u07cb\0\u0201\0\u0804"+
    "\0\u0201\0\u083d\0\u0876\0\u08af\0\u0804\0\u0201\0\u0201\0\u08e8"+
    "\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0201\0\u0201\0\u0201\0\u0201"+
    "\0\u0201\0\u0201\0\u0a05\0\u0201\0\u0201\0\u0a3e\0\u0a77\0\u0ab0"+
    "\0\u0201\0\u0201\0\u0ae9\0\u0201\0\u0b22\0\u0201\0\u0201\0\u0201"+
    "\0\u0201\0\u0201\0\u0201\0\u0201\0\u0201\0\u0201\0\u0201\0\u0b5b"+
    "\0\u0b94\0\u0201\0\u0201\0\u0201\0\u0201\0\u0201\0\u0201\0\u0201"+
    "\0\u0201\0\u0201\0\u0201\0\u0201\0\u0201\0\u0201\0\u0201\0\u0201"+
    "\0\u0201\0\u0201\0\u0bcd\0\u0c06\0\u0c3f\0\u0201\0\u0c78\0\u0cb1"+
    "\0\u0cea\0\u0201\0\u0d23\0\u0201\0\u0201\0\u0201\0\u0273\0\u0d5c"+
    "\0\u0273\0\u0201\0\u0273";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\1\14\1\13\1\15\1\12\1\16\1\17"+
    "\2\15\1\17\1\20\1\15\1\21\1\12\1\17\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\3\15\1\30\3\15"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\4\15\1\0\1\13"+
    "\1\0\1\56\1\57\1\60\13\56\1\61\5\56\1\62"+
    "\44\56\1\63\1\64\1\65\13\63\1\66\4\63\1\67"+
    "\45\63\2\13\1\0\17\13\1\70\43\13\3\0\1\13"+
    "\1\71\1\72\63\13\3\0\2\12\1\0\1\12\1\73"+
    "\3\12\2\73\2\12\1\73\10\12\11\73\24\12\4\73"+
    "\3\0\2\12\1\0\1\12\1\74\3\12\2\74\2\12"+
    "\1\74\10\12\11\74\24\12\4\74\3\0\1\12\1\13"+
    "\1\14\1\13\16\12\1\75\1\12\1\76\41\12\1\0"+
    "\1\13\1\0\1\56\1\57\1\60\13\56\1\61\5\56"+
    "\1\77\44\56\72\0\1\13\73\0\7\15\1\0\1\15"+
    "\2\0\1\15\5\0\11\15\24\0\4\15\2\0\1\15"+
    "\6\0\1\100\1\101\1\102\1\0\1\100\1\103\1\104"+
    "\2\0\1\100\10\0\1\104\1\105\1\0\1\106\26\0"+
    "\1\106\1\105\1\107\12\0\2\17\2\0\1\17\1\103"+
    "\1\104\2\0\1\17\10\0\1\104\1\105\1\0\1\106"+
    "\26\0\1\106\1\105\1\107\12\0\2\103\2\0\1\103"+
    "\4\0\1\103\66\0\1\110\30\0\1\111\43\0\1\112"+
    "\1\113\23\0\1\114\70\0\1\115\26\0\7\15\1\0"+
    "\1\15\2\0\1\15\5\0\1\15\1\116\7\15\24\0"+
    "\4\15\2\0\1\15\4\0\7\15\1\0\1\15\2\0"+
    "\1\15\5\0\5\15\1\117\3\15\24\0\4\15\2\0"+
    "\1\15\4\0\7\15\1\0\1\15\2\0\1\15\5\0"+
    "\2\15\1\120\6\15\24\0\4\15\2\0\1\15\46\0"+
    "\1\121\70\0\1\122\1\123\67\0\1\124\1\0\1\125"+
    "\66\0\1\126\70\0\1\127\6\0\1\130\61\0\1\131"+
    "\7\0\1\132\60\0\1\133\10\0\1\134\57\0\1\135"+
    "\70\0\1\136\22\0\1\56\2\0\13\56\1\0\5\56"+
    "\1\0\44\56\1\0\1\57\67\0\1\137\2\0\3\137"+
    "\1\140\3\137\1\141\3\137\1\142\1\140\3\137\1\143"+
    "\1\144\1\145\1\146\2\137\1\147\3\137\1\150\27\137"+
    "\1\151\3\0\1\63\2\0\13\63\1\0\4\63\1\0"+
    "\45\63\1\0\1\64\67\0\1\137\2\0\3\137\1\140"+
    "\3\137\1\141\3\137\1\152\1\140\3\137\1\153\1\154"+
    "\1\155\1\156\2\137\1\157\3\137\1\160\27\137\1\161"+
    "\24\0\1\71\50\0\1\71\73\0\7\73\1\0\1\73"+
    "\2\0\1\73\5\0\11\73\24\0\4\73\2\0\1\73"+
    "\4\0\7\74\1\0\1\74\2\0\1\74\5\0\11\74"+
    "\24\0\4\74\2\0\1\74\6\0\1\100\1\101\2\0"+
    "\1\100\1\103\1\104\2\0\1\100\10\0\1\104\2\0"+
    "\1\162\26\0\1\162\14\0\2\101\2\0\1\101\1\103"+
    "\1\104\2\0\1\101\10\0\1\104\46\0\2\163\1\0"+
    "\2\163\1\0\1\163\2\0\1\163\10\0\3\163\30\0"+
    "\3\163\11\0\2\103\2\0\1\103\1\0\1\104\2\0"+
    "\1\103\10\0\1\104\1\105\31\0\1\105\1\107\12\0"+
    "\2\164\2\0\1\164\2\0\1\165\1\0\1\164\37\0"+
    "\1\165\31\0\1\166\54\0\7\15\1\0\1\15\2\0"+
    "\1\15\5\0\2\15\1\167\6\15\24\0\4\15\2\0"+
    "\1\15\4\0\7\15\1\0\1\15\2\0\1\15\5\0"+
    "\6\15\1\170\2\15\24\0\4\15\2\0\1\15\4\0"+
    "\7\15\1\0\1\15\2\0\1\15\5\0\6\15\1\171"+
    "\2\15\24\0\4\15\2\0\1\15\46\0\1\172\1\173"+
    "\67\0\1\174\30\0\1\141\3\0\1\141\4\0\1\141"+
    "\57\0\1\175\3\0\1\175\4\0\1\175\57\0\2\163"+
    "\1\0\2\163\1\0\1\163\2\0\1\163\10\0\3\163"+
    "\1\176\26\0\1\176\3\163\11\0\2\164\2\0\1\164"+
    "\4\0\1\164\11\0\1\105\31\0\1\105\1\107\12\0"+
    "\2\164\2\0\1\164\4\0\1\164\55\0\7\15\1\0"+
    "\1\15\2\0\1\15\5\0\3\15\1\177\5\15\24\0"+
    "\4\15\2\0\1\15\4\0\7\15\1\0\1\15\2\0"+
    "\1\15\5\0\7\15\1\200\1\15\24\0\4\15\2\0"+
    "\1\15\4\0\7\15\1\0\1\15\2\0\1\15\5\0"+
    "\6\15\1\201\2\15\24\0\4\15\2\0\1\15\46\0"+
    "\1\202\26\0\7\15\1\0\1\15\2\0\1\15\5\0"+
    "\3\15\1\203\5\15\24\0\4\15\2\0\1\15";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3477];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\2\11\6\1\1\11\2\1\2\11\3\1\10\11"+
    "\4\1\3\11\6\1\1\11\2\1\1\11\1\1\1\11"+
    "\2\1\1\11\1\1\1\11\4\1\2\11\1\1\2\0"+
    "\1\1\1\0\6\11\1\1\2\11\3\1\2\11\1\1"+
    "\1\11\1\1\12\11\2\1\21\11\2\1\1\0\1\11"+
    "\3\1\1\11\1\1\3\11\3\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer sb = new StringBuffer();
    String file;
    String path;
    ErrorQueue eq;
    HashMap keywords;

    public Lexer_c(java.io.Reader reader, FileSource file, ErrorQueue eq) {
        this(reader);
        this.file = file.name();
        this.path = file.path();
        this.eq = eq;
        this.keywords = new HashMap();
        init_keywords();
    }

    protected void init_keywords() {
        keywords.put("PUBKEY",      new Integer(sym.PUBKEY));
        keywords.put("PRIVKEY",      new Integer(sym.PRIVKEY));
        keywords.put("abstract",      new Integer(sym.ABSTRACT));
        keywords.put("assert",        new Integer(sym.ASSERT));
        keywords.put("boolean",       new Integer(sym.BOOLEAN));
        keywords.put("break",         new Integer(sym.BREAK));
        keywords.put("byte",          new Integer(sym.BYTE));
        keywords.put("case",          new Integer(sym.CASE));
        keywords.put("catch",         new Integer(sym.CATCH));
        keywords.put("char",          new Integer(sym.CHAR));
        keywords.put("class",         new Integer(sym.CLASS));
        keywords.put("const",         new Integer(sym.CONST));
        keywords.put("continue",      new Integer(sym.CONTINUE));
        keywords.put("default",       new Integer(sym.DEFAULT));
        keywords.put("do",            new Integer(sym.DO));
        keywords.put("double",        new Integer(sym.DOUBLE));
        keywords.put("else",          new Integer(sym.ELSE));
        keywords.put("extends",       new Integer(sym.EXTENDS));
        keywords.put("final",         new Integer(sym.FINAL));
        keywords.put("finally",       new Integer(sym.FINALLY));
        keywords.put("float",         new Integer(sym.FLOAT));
        keywords.put("for",           new Integer(sym.FOR));
        keywords.put("goto",          new Integer(sym.GOTO));
        keywords.put("if",            new Integer(sym.IF));
        keywords.put("implements",    new Integer(sym.IMPLEMENTS));
        keywords.put("import",        new Integer(sym.IMPORT));
        keywords.put("instanceof",    new Integer(sym.INSTANCEOF));
        keywords.put("int",           new Integer(sym.INT));
        keywords.put("interface",     new Integer(sym.INTERFACE));
        keywords.put("long",          new Integer(sym.LONG));
        keywords.put("native",        new Integer(sym.NATIVE));
        keywords.put("new",           new Integer(sym.NEW));
        keywords.put("package",       new Integer(sym.PACKAGE));
        keywords.put("private",       new Integer(sym.PRIVATE));
        keywords.put("protected",     new Integer(sym.PROTECTED));
        keywords.put("public",        new Integer(sym.PUBLIC));
        keywords.put("return",        new Integer(sym.RETURN));
        keywords.put("short",         new Integer(sym.SHORT));
        keywords.put("static",        new Integer(sym.STATIC));
        keywords.put("strictfp",      new Integer(sym.STRICTFP));
        keywords.put("super",         new Integer(sym.SUPER));
        keywords.put("switch",        new Integer(sym.SWITCH));
        keywords.put("synchronized",  new Integer(sym.SYNCHRONIZED));
        keywords.put("this",          new Integer(sym.THIS));
        keywords.put("throw",         new Integer(sym.THROW));
        keywords.put("throws",        new Integer(sym.THROWS));
        keywords.put("transient",     new Integer(sym.TRANSIENT));
        keywords.put("try",           new Integer(sym.TRY));
        keywords.put("void",          new Integer(sym.VOID));
        keywords.put("volatile",      new Integer(sym.VOLATILE));
        keywords.put("while",         new Integer(sym.WHILE));
        keywords.put("condition",     new Integer(sym.CONDITION));
        keywords.put("trigger",       new Integer(sym.TRIGGER));
    }

    public String file() {
        return file;
    }

    public String path() {
        return path;
    }

    private Position pos() {
        return new Position(path, file, yyline+1, yycolumn, yyline+1,
                            yycolumn + yytext().length());
    }

    private Position pos(int len) {
        return new Position(path, file, yyline+1, yycolumn-len-1, yyline+1,
                            yycolumn+1);
    }

    private Token key(int symbol) {
        return new Keyword(pos(), yytext(), symbol);
    }

    private Token op(int symbol) {
        return new Operator(pos(), yytext(), symbol);
    }

    private Token id() {
        return new Identifier(pos(), yytext(), sym.IDENTIFIER);
    }

    private Token int_lit(String s, int radix) {
        BigInteger x = new BigInteger(s, radix);
        boolean boundary = (radix == 10 && s.equals("2147483648"));
        int bits = radix == 10 ? 31 : 32;
        if (x.bitLength() > bits && ! boundary) {
            eq.enqueue(ErrorInfo.LEXICAL_ERROR, "Integer literal \"" +
                        yytext() + "\" out of range.", pos());
        }
        return new IntegerLiteral(pos(), x.intValue(),
                boundary ? sym.INTEGER_LITERAL_BD : sym.INTEGER_LITERAL);
    }

    private Token long_lit(String s, int radix) {
        BigInteger x = new BigInteger(s, radix);
        boolean boundary = (radix == 10 && s.equals("9223372036854775808"));
        int bits = radix == 10 ? 63 : 64;
        if (x.bitLength() > bits && ! boundary) {
            eq.enqueue(ErrorInfo.LEXICAL_ERROR, "Long literal \"" +
                        yytext() + "\" out of range.", pos());
        }
        return new LongLiteral(pos(), x.longValue(),
                boundary ? sym.LONG_LITERAL_BD : sym.LONG_LITERAL);
    }

    private Token float_lit(String s) {
        try {
            Float x = Float.valueOf(s);
	    boolean zero = true;
	    for (int i = 0; i < s.length(); i++) {
		if ('1' <= s.charAt(i) && s.charAt(i) <= '9') {
		    zero = false;
		    break;
		}
                if (s.charAt(i) == 'e' || s.charAt(i) == 'E') {
                    break; // 0e19 is still 0
                }
	    }
	    if (x.isInfinite() || x.isNaN() || (x.floatValue() == 0 && ! zero)) {
		eq.enqueue(ErrorInfo.LEXICAL_ERROR,
			   "Illegal float literal \"" + yytext() + "\"", pos());
	    }
            return new FloatLiteral(pos(), x.floatValue(), sym.FLOAT_LITERAL);
        }
        catch (NumberFormatException e) {
            eq.enqueue(ErrorInfo.LEXICAL_ERROR,
                       "Illegal float literal \"" + yytext() + "\"", pos());
            return new FloatLiteral(pos(), 0f, sym.FLOAT_LITERAL);
        }
    }

    private Token double_lit(String s) {
        try {
            Double x = Double.valueOf(s);
	    boolean zero = true;
	    for (int i = 0; i < s.length(); i++) {
		if ('1' <= s.charAt(i) && s.charAt(i) <= '9') {
		    zero = false;
		    break;
		}
                if (s.charAt(i) == 'e' || s.charAt(i) == 'E') {
                    break; // 0e19 is still 0
                }
	    }
	    if (x.isInfinite() || x.isNaN() || (x.doubleValue() == 0 && ! zero)) {
		eq.enqueue(ErrorInfo.LEXICAL_ERROR,
			   "Illegal double literal \"" + yytext() + "\"", pos());
	    }
            return new DoubleLiteral(pos(), x.doubleValue(), sym.DOUBLE_LITERAL);
        }
        catch (NumberFormatException e) {
            eq.enqueue(ErrorInfo.LEXICAL_ERROR,
                       "Illegal double literal \"" + yytext() + "\"", pos());
            return new DoubleLiteral(pos(), 0., sym.DOUBLE_LITERAL);
        }
    }

    private Token char_lit(String s) {
        if (s.length() == 1) {
            char x = s.charAt(0);
            return new CharacterLiteral(pos(), x, sym.CHARACTER_LITERAL);
        }
        else {
            eq.enqueue(ErrorInfo.LEXICAL_ERROR,
                       "Illegal character literal \'" + s + "\'", pos(s.length()));
            return new CharacterLiteral(pos(), '\0', sym.CHARACTER_LITERAL);
        }
    }

    private Token boolean_lit(boolean x) {
        return new BooleanLiteral(pos(), x, sym.BOOLEAN_LITERAL);
    }

    private Token null_lit() {
        return new NullLiteral(pos(), sym.NULL_LITERAL);
    }

    private Token string_lit() {
        return new StringLiteral(pos(sb.length()), sb.toString(),
                                 sym.STRING_LITERAL);
    }

    private String chop(int i, int j) {
        return yytext().substring(i,yylength()-j);
    }

    private String chop(int j) {
        return chop(0, j);
    }

    private String chop() {
        return chop(0, 1);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer_c(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer_c(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2226) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { eq.enqueue(ErrorInfo.LEXICAL_ERROR,
                                              "Illegal character \"" +
                                              yytext() + "\"", pos());
          }
        case 96: break;
        case 2: 
          { /* ignore */
          }
        case 97: break;
        case 3: 
          { Integer i = (Integer) keywords.get(yytext());
                    if (i == null) return id();
                    else return key(i.intValue());
          }
        case 98: break;
        case 4: 
          { return int_lit(yytext(), 10);
          }
        case 99: break;
        case 5: 
          { return op(sym.DOT);
          }
        case 100: break;
        case 6: 
          { return op(sym.MINUS);
          }
        case 101: break;
        case 7: 
          { yybegin(ACCRUE_ANNOTATION);
          }
        case 102: break;
        case 8: 
          { return op(sym.DIV);
          }
        case 103: break;
        case 9: 
          { return op(sym.MULT);
          }
        case 104: break;
        case 10: 
          { yybegin(CHARACTER); sb.setLength(0);
          }
        case 105: break;
        case 11: 
          { yybegin(STRING); sb.setLength(0);
          }
        case 106: break;
        case 12: 
          { return op(sym.LPAREN);
          }
        case 107: break;
        case 13: 
          { return op(sym.RPAREN);
          }
        case 108: break;
        case 14: 
          { return op(sym.LBRACE);
          }
        case 109: break;
        case 15: 
          { return op(sym.RBRACE);
          }
        case 110: break;
        case 16: 
          { return op(sym.LBRACK);
          }
        case 111: break;
        case 17: 
          { return op(sym.RBRACK);
          }
        case 112: break;
        case 18: 
          { return op(sym.SEMICOLON);
          }
        case 113: break;
        case 19: 
          { return op(sym.COMMA);
          }
        case 114: break;
        case 20: 
          { return op(sym.EQ);
          }
        case 115: break;
        case 21: 
          { return op(sym.GT);
          }
        case 116: break;
        case 22: 
          { return op(sym.LT);
          }
        case 117: break;
        case 23: 
          { return op(sym.NOT);
          }
        case 118: break;
        case 24: 
          { return op(sym.COMP);
          }
        case 119: break;
        case 25: 
          { return op(sym.QUESTION);
          }
        case 120: break;
        case 26: 
          { return op(sym.COLON);
          }
        case 121: break;
        case 27: 
          { return op(sym.AND);
          }
        case 122: break;
        case 28: 
          { return op(sym.OR);
          }
        case 123: break;
        case 29: 
          { return op(sym.PLUS);
          }
        case 124: break;
        case 30: 
          { return op(sym.XOR);
          }
        case 125: break;
        case 31: 
          { return op(sym.MOD);
          }
        case 126: break;
        case 32: 
          { sb.append( yytext() );
          }
        case 127: break;
        case 33: 
          { yybegin(YYINITIAL);
                                   eq.enqueue(ErrorInfo.LEXICAL_ERROR,
                                              "Unclosed string literal",
                                              pos(sb.length()));
          }
        case 128: break;
        case 34: 
          { yybegin(YYINITIAL);
                                   return string_lit();
          }
        case 129: break;
        case 35: 
          { yybegin(YYINITIAL);
                                  eq.enqueue(ErrorInfo.LEXICAL_ERROR,
                                             "Unclosed character literal",
                                             pos(sb.length()));
          }
        case 130: break;
        case 36: 
          { yybegin(YYINITIAL);
                                   return char_lit(sb.toString());
          }
        case 131: break;
        case 37: 
          { yybegin(YYINITIAL);
          }
        case 132: break;
        case 38: 
          { Integer i = (Integer) keywords.get("@"+yytext());
                     yybegin(YYINITIAL);
                     if (i == null) return id();
                     else return key(i.intValue());
          }
        case 133: break;
        case 39: 
          { Integer i = (Integer) keywords.get("@"+yytext());
                     yybegin(ACCRUE_COMMENT_ANNOTATION_CONTINUATION);
                     if (i == null) return id();
                     else return key(i.intValue());
          }
        case 134: break;
        case 40: 
          { yybegin(ACCRUE_COMMENT_ANNOTATION_STRING); sb.setLength(0);
          }
        case 135: break;
        case 41: 
          { yybegin(TRADITIONAL_COMMENT);
                                   return string_lit();
          }
        case 136: break;
        case 42: 
          { return int_lit(yytext(), 8);
          }
        case 137: break;
        case 43: 
          { return double_lit(yytext());
          }
        case 138: break;
        case 44: 
          { return float_lit(chop());
          }
        case 139: break;
        case 45: 
          { return long_lit(chop(), 10);
          }
        case 140: break;
        case 46: 
          { return double_lit(chop());
          }
        case 141: break;
        case 47: 
          { return op(sym.MINUSMINUS);
          }
        case 142: break;
        case 48: 
          { return op(sym.MINUSEQ);
          }
        case 143: break;
        case 49: 
          { yybegin(END_OF_LINE_COMMENT);
          }
        case 144: break;
        case 50: 
          { yybegin(TRADITIONAL_COMMENT);
          }
        case 145: break;
        case 51: 
          { return op(sym.DIVEQ);
          }
        case 146: break;
        case 52: 
          { return op(sym.MULTEQ);
          }
        case 147: break;
        case 53: 
          { return op(sym.EQEQ);
          }
        case 148: break;
        case 54: 
          { return op(sym.GTEQ);
          }
        case 149: break;
        case 55: 
          { return op(sym.RSHIFT);
          }
        case 150: break;
        case 56: 
          { return op(sym.LTEQ);
          }
        case 151: break;
        case 57: 
          { return op(sym.LSHIFT);
          }
        case 152: break;
        case 58: 
          { return op(sym.NOTEQ);
          }
        case 153: break;
        case 59: 
          { return op(sym.ANDEQ);
          }
        case 154: break;
        case 60: 
          { return op(sym.ANDAND);
          }
        case 155: break;
        case 61: 
          { return op(sym.OREQ);
          }
        case 156: break;
        case 62: 
          { return op(sym.OROR);
          }
        case 157: break;
        case 63: 
          { return op(sym.PLUSEQ);
          }
        case 158: break;
        case 64: 
          { return op(sym.PLUSPLUS);
          }
        case 159: break;
        case 65: 
          { return op(sym.XOREQ);
          }
        case 160: break;
        case 66: 
          { return op(sym.MODEQ);
          }
        case 161: break;
        case 67: 
          { eq.enqueue(ErrorInfo.LEXICAL_ERROR,
                                              "Illegal escape character \"" +
                                              yytext() + "\"", pos());
          }
        case 162: break;
        case 68: 
          { try {
                                       int x = Integer.parseInt(chop(1,0), 8);
                                       sb.append((char) x);
                                   }
                                   catch (NumberFormatException e) {
                                       eq.enqueue(ErrorInfo.LEXICAL_ERROR,
                                                  "Illegal octal escape \""
                                                  + yytext() + "\"", pos());
                                   }
          }
        case 163: break;
        case 69: 
          { sb.append( '\\' );
          }
        case 164: break;
        case 70: 
          { sb.append( '\'' );
          }
        case 165: break;
        case 71: 
          { sb.append( '\"' );
          }
        case 166: break;
        case 72: 
          { sb.append( '\t' );
          }
        case 167: break;
        case 73: 
          { sb.append( '\r' );
          }
        case 168: break;
        case 74: 
          { sb.append( '\f' );
          }
        case 169: break;
        case 75: 
          { sb.append( '\n' );
          }
        case 170: break;
        case 76: 
          { sb.append( '\b' );
          }
        case 171: break;
        case 77: 
          { sb.append('\\');
          }
        case 172: break;
        case 78: 
          { sb.append('\'');
          }
        case 173: break;
        case 79: 
          { sb.append('\"');
          }
        case 174: break;
        case 80: 
          { sb.append('\t');
          }
        case 175: break;
        case 81: 
          { sb.append('\r');
          }
        case 176: break;
        case 82: 
          { sb.append('\f');
          }
        case 177: break;
        case 83: 
          { sb.append('\n');
          }
        case 178: break;
        case 84: 
          { sb.append('\b');
          }
        case 179: break;
        case 85: 
          { return long_lit(chop(), 8);
          }
        case 180: break;
        case 86: 
          { return int_lit(chop(2,0), 16);
          }
        case 181: break;
        case 87: 
          { yybegin(ACCRUE_COMMENT_ANNOTATION);
          }
        case 182: break;
        case 88: 
          { return op(sym.RSHIFTEQ);
          }
        case 183: break;
        case 89: 
          { return op(sym.URSHIFT);
          }
        case 184: break;
        case 90: 
          { return op(sym.LSHIFTEQ);
          }
        case 185: break;
        case 91: 
          { return long_lit(chop(2,1), 16);
          }
        case 186: break;
        case 92: 
          { return boolean_lit(true);
          }
        case 187: break;
        case 93: 
          { return null_lit();
          }
        case 188: break;
        case 94: 
          { return op(sym.URSHIFTEQ);
          }
        case 189: break;
        case 95: 
          { return boolean_lit(false);
          }
        case 190: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {     return new EOF(pos(), sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

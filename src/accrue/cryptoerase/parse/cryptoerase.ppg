// Assumes polyglot.jar is in classpath
include "polyglot/parse/java12.cup"

package accrue.cryptoerase.parse;

import accrue.cryptoerase.ast.*;
import accrue.cryptoerase.types.*;
import polyglot.parse.*;

parser Grm extends polyglot.parse.Grm {:
    public final CETypeSystem ts;
    public final CENodeFactory nf;

    public Grm(Lexer l, CETypeSystem t, CENodeFactory n, ErrorQueue q) {
        super(l, t, n, q);
        ts = t;
        nf = n;
    }
    
    public List variableDeclarators(TypeNode a, PolicyNode label, List b, Flags flags) throws Exception {
        List l = new LinkedList<LocalDecl>();
        for (Iterator i = b.iterator(); i.hasNext(); ) {
            VarDeclarator d = (VarDeclarator) i.next();
            l.add(nf.LocalDecl(pos(d), flags, array(a, d.dims), label, d.name, d.init));
        }
        return l;        
    }
    
:};

terminal Token PUBKEY; // used in policies
terminal Token PRIVKEY; // used in policies

non terminal Expr condition;
non terminal Expr accesspath;
non terminal Receiver accesspath_receiver;
non terminal PolicyNode label, label_opt;
non terminal PolicyNode erasure_policy, erasure_policy_b;
non terminal TypeNode labeled_primitive_type;
non terminal Expr security_cast_expression;

start with goal;

condition ::=
        accesspath:a {:  RESULT = a;  :}
     |  NOT:x accesspath:a {:  RESULT = parser.nf.Unary(parser.pos(x, a), a, Unary.NOT);  :}
     ;

accesspath ::=
        IDENTIFIER:a
            {: RESULT = parser.nf.AmbExpr(parser.pos(a), parser.nf.Id(parser.pos(a), a.getIdentifier())); :}
    |   accesspath_receiver:a DOT IDENTIFIER:b
            {: RESULT = parser.nf.Field(parser.pos(a, b),
                                        a,
                                        b.getIdentifier());
            :}
    ;

accesspath_receiver ::=
        THIS:a {:  RESULT = parser.nf.This(parser.pos(a));  :}
    |   IDENTIFIER:a {: RESULT = parser.nf.AmbExpr(parser.pos(a), parser.nf.Id(parser.pos(a), a.getIdentifier())); :}
    |   accesspath_receiver:a DOT IDENTIFIER:b
            {: RESULT = parser.nf.Field(parser.pos(a, b),
                                        a,
                                        b.getIdentifier());
            :}
    ;



label ::=
       // PolicyNode
       LBRACE:x erasure_policy:a RBRACE:y
            {: 
               RESULT = a;
              :}
     |
       PUBKEY:x LPAREN erasure_policy:p RPAREN LBRACE erasure_policy:a RBRACE:y
            {: 
               RESULT = parser.nf.PubKeyPolicy(parser.pos(x,y), p, a);
              :}
     |
       PRIVKEY:x LPAREN erasure_policy:p RPAREN LBRACE erasure_policy:a RBRACE:y
            {: 
               RESULT = parser.nf.PrivKeyPolicy(parser.pos(x,y), p, a);
              :}
     ;
     
label_opt ::=
                    // PolicyNode
            {: RESULT = null; :}
    |   label:a
            {: RESULT = a; :}
    ;
     

erasure_policy ::=
       // PolicyNode
    | erasure_policy_b:p  {: RESULT = p;                                          
                    :}
    | erasure_policy:p DIV condition:c erasure_policy_b:q {: RESULT = parser.nf.PolicyErasure(parser.pos(p,q),
                                        p, c, q); :}
    ;

erasure_policy_b ::=
       // PolicyNode
      IDENTIFIER:a {: RESULT = parser.nf.PolicyLevel(parser.pos(a),
                                        a.getIdentifier()); 
                                        
                    :}
    | LPAREN:a erasure_policy:p RPAREN:b {: RESULT = p;                                          
                    :}

    ;
    
extend unary_expression_not_plus_minus ::=
       security_cast_expression:a
            {: RESULT = a; :}
    ;
    

security_cast_expression ::=
        LPAREN:p label:a RPAREN unary_expression_not_plus_minus:b
            {:  RESULT = parser.nf.SecurityCast(parser.pos(p,b,a),
                                                a,
                                                b); 
            :}
     ;
     
     
extend field_declaration ::=
                    // List of ClassMember
        modifiers_opt:a type:b label:lb variable_declarators:c SEMICOLON:e
            {: List l = new LinkedList<ClassMember>();
               for (Iterator i = c.iterator(); i.hasNext(); ) {
                   VarDeclarator d = (VarDeclarator) i.next();
                   l.add(parser.nf.FieldDecl(parser.pos(b, e),
                                             a, parser.array(b, d.dims),
                                             lb,
                                             d.name, d.init));
               }
               RESULT = l; :}
    ;
     
extend local_variable_declaration ::=
                    // List of LocalDecl
        type:a label:lb variable_declarators:b
            {: RESULT = parser.variableDeclarators(a, lb, b, Flags.NONE); :}
    |   FINAL type:a label:lb variable_declarators:b
            {: RESULT = parser.variableDeclarators(a, lb, b, Flags.FINAL); :}
    ;
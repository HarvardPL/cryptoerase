# pth test script
#
# This file is a test script for pth (Polyglot Test Harness). It
# conforms to the following grammar.
#
#      ScriptFile   ::= CompilerTest+
#      CompilerTest ::= ExtClassName ["CmdLineArgs"] { FileTest [; FileTest]* }
#      FileTest     ::= Filenames [Description] [FailureSet]
#      Filenames    ::= Filename [Filename]*
#      Description  ::= LitString
#      FailureSet   ::= Failure [, Failure]*
#      Failure      ::= ( ErrorKind )
#                    |  ( ErrorKind, "RegExp" )
#                    |  ( "RegExp" )
#                    |  ( )
#      ErrorKind    :   one of, or a unique prefix of one of the following 
#                       strings: "Warning", "Internal Error", "I/O Error", 
#                       "Lexical Error", "Syntax Error", "Semantic Error"
#                       or "Post-compiler Error".
#      Filename     :   the name of a file. Is interpreted from the 
#                       directory where pth is run.
#      LitString    :   a literal string, enclosed in quotes.
#      RegExp       :   a regular expression, as in java.util.regex; 
#                       is always enclosed in quotes.
#      CmdLineArgs  :   additional command line args for the Polyglot 
#                       compiler; is always enclosed in quotes.

accrue.cryptoerase.CryptoErasureExtensionInfo "-classpath ../rt-classes:../classes:../../Infoflow/classes:../../Accrue/classes:../lib/JSON-java.jar -sigsourcepath ../sig-src" {
    Good01.jl ;
    Good02.jl ;
    Good03.jl ;
    Good04.jl ;
    Good05.jl ;
    Good06.jl ;
    Good07.jl ;
    Good08.jl ;
    Good09.jl ;
    Good10.jl ;
    Good11.jl ;
    Good12.jl ;
    Good13.jl ;
    Good14.jl ;
    Good15.jl ;
    Good16.jl ;
    Good17.jl ;
    Bad01.jl "High data flows to low field" (Semantic, "Uh oh");
    Bad02.jl "High local flows to low field" (Semantic, "Uh oh");
    Bad03.jl "Erasure policy on final field" (Semantic, "erasure policy");
    Bad04.jl "Implicit flow - if statement" (Semantic, "Uh oh");
    Bad05.jl "Implicit flow - while statement" (Semantic, "Uh oh");
    Bad06.jl "Implicit flow + erasure trigger" (Semantic, "Uh oh");
    Bad07.jl "Erase to TOP in local variable" (Semantic, "Uh oh");
    Bad08.jl "Final fields not erasable" (Semantic, "Uh oh");
    Bad09.jl "Arrays not erasable - assignment" (Semantic, "Uh oh");
    Bad10.jl "Arrays not erasable - init" (Semantic, "Uh oh");
    Bad11.jl (Semantic, "Uh oh");
    Bad11.jl (Semantic, "Uh oh");
    Bad12.jl (Semantic, "Uh oh");
    Bad13.jl (Semantic);
    Bad14.jl (Semantic);
    Bad15.jl (Semantic);
    Bad16.jl (Semantic);
    Bad17.jl (Semantic);
    Bad18.jl (Semantic);
    Bad19.jl (Semantic);
    Bad20.jl (Semantic);
    Bad21.jl (Semantic);
    Condition01.jl (Semantic);
    Condition02.jl (Semantic);
    Condition03.jl (Semantic);
    Condition04.jl (Semantic);
}

// Assumes polyglot.jar is in classpath
include "polyglot/parse/java12.cup"

package accrue.infoflow.parse;

import accrue.infoflow.ast.InfoFlowNodeFactory;
import polyglot.parse.*;

parser Grm extends polyglot.parse.Grm {:
    public final TypeSystem ts;
    public final InfoFlowNodeFactory nf;

    public Grm(Lexer l, TypeSystem t, InfoFlowNodeFactory n, ErrorQueue q) {
        super(l, t, n, q);
        ts = t;
        nf = n;
    }
:};

terminal Token CONDITION; // primitive_type
terminal Token TRIGGER; // trigger expression.


non terminal Expr condition;
non terminal Expr accesspath;
non terminal Receiver accesspath_receiver;
non terminal LabelNode label, label_opt;
non terminal PolicyNode erasure_policy;

start with goal;

condition ::=
        accesspath:a {:  RESULT = a;  :}
     |  NOT:x accesspath:a {:  RESULT = parser.nf.Unary(parser.pos(x, a), a, Unary.NOT);  :}
     ;



extend primitive_type ::=
                    // TypeNode
        CONDITION:a
            {: RESULT = parser.nf.CanonicalTypeNode(parser.pos(a), parser.ts.Condition()); :}
    ;


accesspath ::=
        IDENTIFIER:a
            {: RESULT = new Name(parser, parser.pos(a), a.getIdentifier()).toExpr(); :}
    |   accesspath_receiver:a DOT IDENTIFIER:b
            {: RESULT = parser.nf.Field(parser.pos(a, b),
                                        a,
                                        b.getIdentifier());
            :}
    ;

accesspath_receiver ::=
        THIS:a {:  RESULT = parser.nf.This(parser.pos(a));  :}
    |   IDENTIFIER:a {: RESULT = new Name(parser, parser.pos(a), a.getIdentifier()).toReceiver(); :}
    |   accesspath_receiver:a DOT IDENTIFIER:b
            {: RESULT = parser.nf.Field(parser.pos(a, b),
                                        a,
                                        b.getIdentifier());
            :}
    ;



label ::=
       // LabelNode
       LBRACE:x erasure_policy:a RBRACE:y
            {: LabelNode ln;
               ln = parser.nf.LabelNode(parser.pos(x, y), a);
               RESULT = ln; :}
     ;

erasure_policy ::=
       // PolicyNode
      IDENTIFIER:a {: RESULT = parser.nf.PolicyLevel(parser.pos(a),
                                        a.getIdentifier()); 
                                        
                    :}
    | erasure_policy:p DIV accesspath:ap erasure_policy:q {: RESULT = parser.nf.PolicyErasure(parser.pos(p,q),
                                        p, ap, q); :}
    | LPAREN:a erasure_policy:p RPAREN:b {: RESULT = p;                                          
                    :}

    ;
    
    
